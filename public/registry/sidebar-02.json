{
  "name": "sidebar-02",
  "type": "registry:block",
  "registryDependencies": [
    "progress",
    "https://www.uicart.io/registry/hint.json"
  ],
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Bell,\n  ChevronLeft,\n  HelpCircle,\n  HomeIcon,\n  Layers2,\n  LucideIcon,\n  Package,\n  Settings,\n  ShoppingCart,\n  User,\n} from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Dispatch, SetStateAction, useState } from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Hint } from \"@/components/ui/hint\";\nimport { motion } from \"framer-motion\";\nimport { usePathname } from \"next/navigation\";\n\ntype MenuItem = {\n  name: string;\n  url: string;\n  icon: React.FC;\n  notifications?: number;\n};\n\nconst menuItems = [\n  {\n    name: \"Home\",\n    url: \"/\",\n    icon: HomeIcon,\n    notifications: 3,\n  },\n  {\n    name: \"Products\",\n    url: \"/products\",\n    icon: ShoppingCart,\n  },\n  {\n    name: \"Customers\",\n    url: \"/customers\",\n    icon: User,\n  },\n  {\n    name: \"Resources\",\n    url: \"/resources\",\n    icon: Package,\n  },\n  {\n    name: \"Notifications\",\n    url: \"/notifications\",\n    icon: Bell,\n  },\n  {\n    name: \"Support\",\n    url: \"/support\",\n    icon: HelpCircle,\n  },\n  {\n    name: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n] satisfies MenuItem[];\n\nconst Sidebar02 = () => {\n  const [open, setOpen] = useState(true);\n  const currentPathname = usePathname();\n  return (\n    <motion.aside\n      layout\n      className=\"sticky top-0 h-screen text-background shrink-0 border-r border-slate-300 bg-white p-2\"\n      style={{ width: open ? \"225px\" : \"fit-content\" }}\n    >\n      <div className=\"flex flex-col gap-y-4 h-full\">\n        <TitleSection open={open} />\n        <NavigationMenu open={open} currentPathname={currentPathname} />\n        <div className=\"mt-auto space-y-2\">\n          <UsageMeter open={open} progress={60} />\n          <ToggleClose open={open} setOpen={setOpen} />\n        </div>\n      </div>\n    </motion.aside>\n  );\n};\n\nconst TitleSection = ({ open }: { open: boolean }) => {\n  return (\n    <div className=\"py-2\">\n      <div className=\"flex cursor-pointer items-center hover:bg-slate-100 rounded-md\">\n        <div className=\"flex items-center gap-2\">\n          <motion.div layout className=\"bg-primary rounded-md p-2 size-10\">\n            <Layers2 className=\"text-primary-foreground\" />\n          </motion.div>\n          {open && (\n            <motion.div\n              initial={{ opacity: 0, y: 12 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.125 }}\n              layout\n            >\n              <span className=\"block text-xs font-semibold\">Acme Company</span>\n              <span className=\"block text-xs text-background/70\">Pro Plan</span>\n            </motion.div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst NavigationMenu = ({\n  open,\n  currentPathname,\n}: {\n  open: boolean;\n  currentPathname: string;\n}) => {\n  return (\n    <nav>\n      <ul className=\"space-y-1 flex flex-col\">\n        {menuItems &&\n          menuItems.map((item) => {\n            return (\n              <NavigationLink\n                key={item.name}\n                title={item.name}\n                Icon={item.icon}\n                href={item.url}\n                open={open}\n                notifications={item.notifications}\n                isActive={currentPathname === item.url}\n              />\n            );\n          })}\n      </ul>\n    </nav>\n  );\n};\n\nconst NavigationLink = ({\n  title,\n  Icon,\n  href,\n  open,\n  notifications,\n  isActive,\n}: {\n  title: string;\n  Icon: LucideIcon;\n  href: string;\n  open: boolean;\n  isActive?: boolean;\n  notifications?: number;\n}) => {\n  return (\n    <Hint\n      delay={100}\n      enabled={!open}\n      content={title}\n      animationFrom=\"left\"\n      animationStiffness={150}\n    >\n      <li className=\"w-full\">\n        <Link\n          href={href}\n          className={cn(\n            \"flex items-center px-1 w-full py-2 gap-2 justify-center hover:bg-primary/30 hover:text-primary rounded-md\",\n            open && \"justify-start\",\n            isActive && \"bg-primary/20 text-primary transition-all\"\n          )}\n        >\n          <motion.div layout>\n            <Icon className=\"size-5\" />\n          </motion.div>\n          {open && (\n            <motion.span\n              layout\n              initial={{ opacity: 0, y: 12 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"text-xs font-medium\"\n            >\n              {title}\n            </motion.span>\n          )}\n          {notifications && open && (\n            <motion.span\n              layout\n              initial={{ opacity: 0, y: 12 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"text-xs font-medium text-primary bg-primary/30 px-1 h-full rounded-sm ml-auto mr-2\"\n            >\n              {notifications}\n            </motion.span>\n          )}\n        </Link>\n      </li>\n    </Hint>\n  );\n};\n\nconst UsageMeter = ({\n  progress,\n  open,\n}: {\n  progress: number;\n  open: boolean;\n}) => {\n  const [isDismissed, setIsDismissed] = useState(false);\n  const maxScore = 100;\n  const progressInPercentage = (progress / maxScore) * 100;\n  const strokeWidth = 15;\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset =\n    circumference - (progressInPercentage / 100) * circumference;\n  if (isDismissed) return null;\n\n  if (open) {\n    return (\n      <div className=\"bg-primary/20 p-2 rounded-md text-primary text-sm space-y-3\">\n        <motion.div\n          initial={{ opacity: 0, y: 12 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          layout\n          className=\"\"\n        >\n          <span className=\"block font-semibold\">Used Space</span>\n          <span>\n            Your team has used 80% of your available space. Need more?\n          </span>\n        </motion.div>\n        <motion.div\n          layout\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.25 }}\n        >\n          <Progress value={progress} />\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 12 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.125 }}\n          className=\"flex gap-2 text-xs\"\n        >\n          <button\n            onClick={() => setIsDismissed(true)}\n            className=\"hover:underline\"\n          >\n            Dismiss\n          </button>\n          <Link className=\"hover:underline\" href=\"/upgrade\">\n            Upgrade plan\n          </Link>\n        </motion.div>\n      </div>\n    );\n  } else {\n    return (\n      <motion.div layout className=\"relative\">\n        <svg className=\"size-10 -rotate-90 transform\" viewBox=\"0 0 160 160\">\n          <circle\n            className=\"text-gray-200 transition-all duration-300 ease-in-out\"\n            strokeWidth={strokeWidth}\n            stroke=\"currentColor\"\n            fill=\"transparent\"\n            r={radius}\n            cx=\"80\"\n            cy=\"80\"\n          />\n          <motion.circle\n            initial={{ strokeDashoffset: circumference }}\n            animate={{ strokeDashoffset }}\n            className=\"text-primary transition-all duration-500 ease-in-out\"\n            strokeWidth={strokeWidth}\n            strokeDasharray={circumference}\n            strokeLinecap=\"round\"\n            stroke=\"currentColor\"\n            fill=\"transparent\"\n            r={radius}\n            cx=\"80\"\n            cy=\"80\"\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n          <span className=\"text-sm font-bold text-primary\">{progress}</span>\n        </div>\n      </motion.div>\n    );\n  }\n};\n\nconst ToggleClose = ({\n  open,\n  setOpen,\n}: {\n  open: boolean;\n  setOpen: Dispatch<SetStateAction<boolean>>;\n}) => {\n  return (\n    <button\n      className=\"flex w-full items-center p-2 hover:bg-primary/30 rounded-md\"\n      onClick={() => setOpen((prev) => !prev)}\n    >\n      {open && (\n        <motion.span layout className=\"text-sm font-medium\">\n          Collapse\n        </motion.span>\n      )}\n      <motion.div layout className=\"ml-auto\">\n        <ChevronLeft\n          className={cn(\n            !open && \"rotate-180\",\n            \"size-5 text-background/70 transition-all duration-300 ease-in-out\"\n          )}\n        />\n      </motion.div>\n    </button>\n  );\n};\n\nexport default Sidebar02;\n",
      "path": "block/sidebar-02/sidebar-02.tsx",
      "target": "components/block/sidebar-02/sidebar-02.tsx"
    }
  ]
}