{
  "name": "sonic-bento",
  "type": "registry:block",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport { Mic } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ntype Props = {\n    wrapperClassName?: string;\n    audioWaveCount?: number;\n    bottomGradientClassName?: string;\n}\nconst SonicBento = ({wrapperClassName, audioWaveCount = 40, bottomGradientClassName}: Props) => {\n  return (\n    <div className={cn(\"relative w-full h-full overflow-hidden bg-green-500\", wrapperClassName)}>\n      <AudioWaves numberOfLines={audioWaveCount} />\n      <Circles bottomGradientClassName={bottomGradientClassName} />\n      <div className=\"absolute left-1/2 h-full w-[26rem] -translate-x-1/2\">\n        <MainLogo />\n      </div>\n    </div>\n  );\n};\n\nexport default SonicBento;\n\nfunction Circles({bottomGradientClassName}: {bottomGradientClassName?: string}) {\n  return (\n    <div className=\"absolute inset-0\">\n      <Circle size={528} opacity=\"3%\" delay={0.45} />\n      <Circle size={400} opacity=\"5%\" delay={0.3} />\n      <Circle size={272} opacity=\"5%\" delay={0.15} />\n      <Circle size={144} opacity=\"10%\" delay={0} isBlurred={true} />\n      <div className={cn(\"absolute inset-0 bg-gradient-to-t from-white to-35%\", bottomGradientClassName)} />\n    </div>\n  );\n}\n\nfunction Circle({\n  size,\n  delay,\n  opacity,\n  isBlurred = false\n}: {\n  size: number;\n  delay: number;\n  opacity: string;\n  isBlurred?: boolean;\n}) {\n  return (\n    <motion.div\n      variants={{\n        idle: { width: `${size}px`, height: `${size}px` },\n        active: {\n          width: [`${size}px`, `${size + 10}px`, `${size}px`],\n          height: [`${size}px`, `${size + 10}px`, `${size}px`],\n          transition: {\n            duration: 0.75,\n            repeat: Infinity,\n            repeatDelay: 1.25,\n            ease: \"easeInOut\",\n            delay,\n          },\n        },\n      }}\n      initial=\"idle\"\n      animate=\"active\"\n      style={{ \"--opacity\": opacity } as React.CSSProperties}\n      className={cn(\n        \"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full\",\n        \"bg-white bg-opacity-[var(--opacity)]\",\n        isBlurred && \"backdrop-blur-[2px]\",\n         \n        // \"bg-[radial-gradient(circle,transparent_25%,color-mix(in_srgb,_theme(colors.green.800)_var(--opacity),transparent)_100%)]\",\n        \"ring-1 ring-inset ring-green-800/[8%]\"\n      )}\n    />\n  );\n}\n\nfunction MainLogo() {\n  return (\n    <div className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 flex size-16 items-center justify-center rounded-full bg-white/20 backdrop-blur-xl\">\n      <Mic className=\"size-8 text-white\" />\n    </div>\n  );\n}\n\nfunction AudioWaves({numberOfLines}: {numberOfLines: number}) {\n  const [waves, setWaves] = useState<number[]>([]);\n  useEffect(() => {\n    const waveCount = numberOfLines // Number of lines\n    const newWaves = [];\n\n    for (let i = 0; i < waveCount; i++) {\n      const randomHeight = Math.random() * 100 + 10; // Random height between 10 and 110\n      newWaves.push(randomHeight);\n    }\n\n    setWaves(newWaves);\n  }, [numberOfLines]);\n\n  return (\n    <div className=\"w-full absolute inset-0 flex justify-between items-center\">\n      {waves.map((height, index) => (\n        <motion.div\n        initial={{ height: \"0px\"}}\n        animate={{ height: [height, height + 10, height] }}\n        transition={{ duration: 0.75, repeat: Infinity, repeatDelay: 1.25, ease: \"easeInOut\", delay: index * 0.05 }}\n          key={index}\n          className=\"w-[3px] bg-white/50\"\n          style={{ height: `${height}px` }}\n        />\n      ))}\n    </div>\n  );\n}\n",
      "path": "block/bento-grid-components/sonic-bento.tsx",
      "target": "components/block/bento-grid-components/sonic-bento.tsx"
    }
  ]
}